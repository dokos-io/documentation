{"_path":"/dodock/installation/plus/script-bash","_dir":"plus","_draft":false,"_partial":false,"_locale":"fr","title":"Installation par script","description":"","body":{"type":"root","children":[{"type":"element","tag":"community-tutorial-notice","props":{},"children":[]},{"type":"element","tag":"h1","props":{"id":"installation-à-laide-dun-script-bash"},"children":[{"type":"text","value":"Installation à l'aide d'un script bash"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"Il est possible d'installer Dokos sous Debian 12 ou Ubuntu 22.04 à l'aide du script ci dessous qui va installer tous les paquets nécessaires et poser les questions de paramétrage tel que le nom de la Base de Données, de l'utilisateur et de son mot de passe. Dokos sera installé dans le dossier \"$HOME/$bench_folder\" de l'utilisateur qui lance le script."}]},{"type":"element","tag":"pre","props":{"code":"#!/usr/bin/env bash\n\n# Retrieve server IP\nserver_ip=$(hostname -I | awk '{print $1}')\n\n#Retrieve script folder\nscript_folder=$(pwd)\n\n# Setting up colors for echo commands\nYELLOW='\\033[1;33m'\nGREEN='\\033[0;32m'\nRED='\\033[0;31m'\nLIGHT_BLUE='\\033[1;34m'\nNC='\\033[0m' # No Color\n\n# Checking Supported OS and distribution\nSUPPORTED_DISTRIBUTIONS=(\"Ubuntu\" \"Debian\")\nSUPPORTED_VERSIONS=(\"22.04\" \"12\")\n\ncheck_os() {\n    local os_name=$(lsb_release -is)\n    local os_version=$(lsb_release -rs)\n    local os_supported=false\n    local version_supported=false\n\n    for i in \"${SUPPORTED_DISTRIBUTIONS[@]}\"; do\n        if [[ \"$i\" = \"$os_name\" ]]; then\n            os_supported=true\n            break\n        fi\n    done\n\n    for i in \"${SUPPORTED_VERSIONS[@]}\"; do\n        if [[ \"$i\" = \"$os_version\" ]]; then\n            version_supported=true\n            break\n        fi\n    done\n\n    if [[ \"$os_supported\" = false ]] || [[ \"$version_supported\" = false ]]; then\n        echo -e \"${RED}This script is not compatible with your operating system or its version.${NC}\"\n        exit 1\n    fi\n}\n\n# Detect the platform (similar to $OSTYPE)\nOS=\"`uname`\"\ncase $OS in\n  'Linux')\n    OS='Linux'\n    if [ -f /etc/redhat-release ] ; then\n      DISTRO='CentOS'\n    elif [ -f /etc/debian_version ] ; then\n      if [ \"$(lsb_release -si)\" == \"Ubuntu\" ]; then\n        DISTRO='Ubuntu'\n      else\n        DISTRO='Debian'\n      fi\n    fi\n    ;;\n  *) ;;\nesac\n\n\nask_twice() {\n    local prompt=\"$1\"\n    local secret=\"$2\"\n    local val1 val2\n\n    while true; do\n        if [ \"$secret\" = \"true\" ]; then\n\n            read -rsp \"$prompt: \" val1\n\n            echo >&2\n        else\n            read -rp \"$prompt: \" val1\n            echo >&2\n        fi\n        \n        if [ \"$secret\" = \"true\" ]; then\n            read -rsp \"Confirm password: \" val2\n            echo >&2\n        else\n            read -rp \"Confirm password: \" val2\n            echo >&2\n        fi\n\n        if [ \"$val1\" = \"$val2\" ]; then\n            printf \"${GREEN}Password confirmed${NC}\" >&2\n            echo \"$val1\"\n            break\n        else\n            printf \"${RED}Inputs do not match. Please try again${NC}\\n\" >&2\n            echo -e \"\\n\"\n        fi\n    done\n}\necho -e \"${LIGHT_BLUE}Welcome to the Dokos Installer...${NC}\"\necho -e \"\\n\"\nsleep 3\n\n# Check OS and version compatibility for all versions\ncheck_os\n\nbench_folder=\"dokos-bench-folder\"\nbenchdir=\"$HOME/$bench_folder\"\n\n#First Let's take you home\ncd $(sudo -u $USER echo $HOME)\necho -e \"\\n\"\n\n#Now let's make sure your instance has the most updated packages\necho -e \"${YELLOW}Updating system packages...${NC}\"\nsleep 2\nsudo apt update\nsudo apt upgrade -y\necho -e \"${GREEN}System packages updated.${NC}\"\nsleep 2\n\n#Now let's install a couple of requirements: git, curl and pip\necho -e \"${YELLOW}Installing preliminary package requirements${NC}\"\nsleep 3\nsudo apt install software-properties-common git curl -y\n\n#Next we'll install the python environment manager...\npy_version=$(python3 --version 2>&1 | awk '{print $2}')\npy_major=$(echo \"$py_version\" | cut -d '.' -f 1)\npy_minor=$(echo \"$py_version\" | cut -d '.' -f 2)\npy_version=$(echo \"$py_major\".\"$py_minor\")\necho -e \"${YELLOW}Installing additional Python packages and Redis Server${NC}\"\nsleep 2\nsudo apt install ca-certificates git python3-dev python3-setuptools python3-venv python3-pip python3-distutils redis-server xvfb libfontconfig wkhtmltopdf -y && \\\n# Mise à jour des dépôts\nsudo apt --fix-broken install -y && \\\nsudo apt install fontconfig xvfb libfontconfig xfonts-base xfonts-75dpi libxrender1 -y && \\\n\necho -e \"${GREEN}Done!${NC}\"\nsleep 1\necho -e \"\\n\"\n#... And mariadb with some extra needed applications.\necho -e \"${YELLOW}Now installing MariaDB.${NC}\"\nsleep 2\nsudo apt install mariadb-server mariadb-client -y\necho -e \"${GREEN}MariaDB and other packages have been installed successfully.${NC}\"\nsleep 2\n\n\n#Install NVM, Node, npm and yarn\necho -e ${YELLOW}\"Now to install NVM, Node, npm and yarn${NC}\"\nsleep 2\ncurl https://raw.githubusercontent.com/creationix/nvm/master/install.sh | bash\n\n# Add environment variables to .profile\necho 'export NVM_DIR=\"$HOME/.nvm\"' >> ~/.profile\necho '[ -s \"$NVM_DIR/nvm.sh\" ] && \\. \"$NVM_DIR/nvm.sh\"  # This loads nvm' >> ~/.profile\necho '[ -s \"$NVM_DIR/bash_completion\" ] && \\. \"$NVM_DIR/bash_completion\"  # This loads nvm bash_completion' >> ~/.profile\n\n# Source .profile to load the new environment variables in the current session\nsource ~/.profile\n\n# Conditional Node.js installation based on the version of ERPNext selected\nnvm install 18\nnode_version=\"18\"\nsudo apt-get -qq install npm -y\nsudo npm install -g yarn\necho -e \"${GREEN}Package installation complete!${NC}\"\nsleep 2\n\n# Now let's reactivate virtual environment if needed and install bench\necho -e \"${YELLOW}Now let's reactivate virtual environment if needed and install bench${NC}\"\nsleep 4\npython3 -m venv $USER && \\\nsource $USER/bin/activate\nnvm use $node_version\npip3 install --upgrade --quiet dokos-cli\n\n\n#Initiate bench in $bench_folder folder, but get a supervisor can't restart bench error...\necho -e \"${YELLOW}Initialising bench in $bench_folder folder.${NC}\" \necho -e \"${LIGHT_BLUE}If you get a restart failed, don't worry, we will resolve that later.${NC}\"\nsleep 4\nbench init $bench_folder --version v4 --verbose\necho -e \"${GREEN}Bench installation complete!${NC}\"\nsleep 2\n\nsudo -k\n\n# Prompt user for site name\necho -e \"${YELLOW}Preparing for new site installation. This could take a minute... or two so please be patient.${NC}\"\nread -p \"Enter the site name (If you wish to install SSL later, please enter a FQDN): \" site_name\nsleep 1\nadmin_pwd=$(ask_twice \"Enter the Administrator password\" \"true\")\necho -e \"\\n\"\nsleep 1\n\n#Next let's set some important parameters.\nread -p \"Choose a name for Dokos's database and database's username: \" db_name\nsleep 1\ndb_pwd=$(ask_twice \"Choose a password for the Dokos's database's username\" \"true\")\necho -e \"\\n\"\nsleep 1\n\n#Now we'll go through the required settings of the mysql_secure_installation...\necho -e ${YELLOW}\"Now we'll go ahead to apply MariaDB security settings...${NC}\"\nsleep 2\n    \nsudo mysql -u root -e \"CREATE USER '$db_name'@'localhost' IDENTIFIED BY '$db_pwd';\"\nsudo mysql -u root -e \"CREATE DATABASE IF NOT EXISTS $db_name CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci;\"\nsudo mysql -u root -e \"GRANT ALL PRIVILEGES ON $db_name . * TO '$db_name'@'localhost';\"\nsudo mysql -u root -e \"FLUSH PRIVILEGES;\"\n\n#sudo service mysql restart\necho -e \"${GREEN}MariaDB settings done!${NC}\"\necho -e \"\\n\"\nsleep 1\n\necho -e \"${YELLOW}Now setting up your site. This might take a few minutes. Please wait...${NC}\"\nsleep 1\n# Change directory to $bench_folder\ncd $bench_folder && \\\n\nsudo chmod -R o+rx /home/$(echo $USER)\n\necho -e \"${YELLOW}Installing apps Payments, Dokos and Hrms to the bench. Please wait...${NC}\"\nsleep 1\nbench get-app --branch v4 payments\nbench get-app --branch v4 dokos\nbench get-app --branch v4 hrms\n\necho -e \"${YELLOW}Installing the website and initalising its database. Please wait...${NC}\"\nsleep 1\n\nbench new-site $site_name --db-name $db_name --db-password $db_pwd --no-setup-db --admin-password $admin_pwd\n\n### fail2ban était installé et paramétré par la commande \"sudo bench setup production $USER\" mais n'est plus traité dans ce script du coup\n\necho -e \"${YELLOW}Installing packages and dependencies for Production...${NC}\"\nsleep 2\n\n# Install and setup supervisor and nginx config\nsudo apt install nginx supervisor -y\nsudo bash -c 'cat << EOF >> /etc/nginx/conf.d/'\"$bench_folder\"'.conf\nupstream '\"$bench_folder\"'-frappe {\n    server 127.0.0.1:8000 fail_timeout=0;\n}\n\nupstream '\"$bench_folder\"'-socketio-server {\n    server 127.0.0.1:9000 fail_timeout=0;\n}\n\nserver {\n    \n    listen 80;\n    listen [::]:80;\n\n    server_name '\"$site_name\"';\n\n    root '\"$benchdir\"'/sites;\n\n    proxy_buffer_size 128k;\n    proxy_buffers 4 256k;\n    proxy_busy_buffers_size 256k;\n\n    add_header X-Frame-Options \"SAMEORIGIN\";\n    add_header Strict-Transport-Security \"max-age=63072000; includeSubDomains; preload\";\n    add_header X-Content-Type-Options nosniff;\n    add_header X-XSS-Protection \"1; mode=block\";\n    add_header Referrer-Policy \"same-origin, strict-origin-when-cross-origin\";\n\n    location /assets {\n        try_files \\$uri =404;\n    }\n\n    location ~ ^/protected/(.*) {\n        internal;\n        try_files /'\"$site_name\"'/\\$1 =404;\n    }\n\n    location /socket.io {\n        proxy_http_version 1.1;\n        proxy_set_header Upgrade \\$http_upgrade;\n        proxy_set_header Connection \"upgrade\";\n        proxy_set_header X-Frappe-Site-Name '\"$site_name\"';\n        proxy_set_header Origin $scheme://\\$http_host;\n        proxy_set_header Host '\"$site_name\"';\n\n        proxy_pass http://'\"$bench_folder\"'-socketio-server;\n    }\n\n    location ^~ /.well-known/acme-challenge/ {\n        default_type \"text/plain\";\n        root /var/www/letsencrypt;\n    }\n\n    location = /.well-known/acme-challenge/ {\n        return 404;\n    }\n\n    location / {\n\n        rewrite ^(.+)/\\$ \\$1 permanent;\n        rewrite ^(.+)/index\\.html\\$ \\$1 permanent;\n        rewrite ^(.+)\\.html\\$ \\$1 permanent;\n\n        location ~* ^/files/.*.(htm|html|svg|xml) {\n            add_header Content-disposition \"attachment\";\n            try_files /'\"$site_name\"'/public/\\$uri @webserver;\n        }\n\n        try_files /'\"$site_name\"'/public/\\$uri @webserver;\n    }\n\n    location @webserver {\n        proxy_http_version 1.1;\n        proxy_set_header X-Forwarded-For \\$remote_addr;\n        proxy_set_header X-Forwarded-Proto \\$scheme;\n        proxy_set_header X-Frappe-Site-Name '\"$site_name\"';\n        proxy_set_header Host '\"$site_name\"';\n        proxy_set_header X-Use-X-Accel-Redirect True;\n        proxy_read_timeout 120;\n        proxy_redirect off;\n\n        proxy_pass  http://'\"$bench_folder\"'-frappe;\n    }\n\n    # error pages\n    error_page 502 /502.html;\n    location /502.html {\n        root /usr/local/lib/python'\"$py_version\"'/dist-packages/bench/config/templates;\n        internal;\n    }\n    \n    # optimizations\n    sendfile on;\n    keepalive_timeout 15;\n    client_max_body_size 50m;\n    client_body_buffer_size 16K;\n    client_header_buffer_size 1k;\n    large_client_header_buffers 4 32k;\n\n    # enable gzip compresion\n    gzip on;\n    gzip_http_version 1.1;\n    gzip_comp_level 5;\n    gzip_min_length 256;\n    gzip_proxied any;\n    gzip_vary on;\n    gzip_types\n        application/atom+xml\n        application/javascript\n        application/json\n        application/rss+xml\n        application/vnd.ms-fontobject\n        application/x-font-ttf\n        application/font-woff\n        application/x-web-app-manifest+json\n        application/xhtml+xml\n        application/xml\n        font/opentype\n        image/svg+xml\n        image/x-icon\n        text/css\n        text/plain\n        text/x-component\n        ;\n\n    tcp_nodelay on;\n    server_tokens off;\n\n    open_file_cache max=65000 inactive=1m;\n    open_file_cache_valid 5s;\n    open_file_cache_min_uses 1;\n    open_file_cache_errors on;\n\n}\nEOF'\n\nsudo bash -c 'cat << EOF >> /etc/supervisor/conf.d/'\"$bench_folder\"'.conf\n; Notes:\n; priority=1 --> Lower priorities indicate programs that start first and shut down last\n; killasgroup=true --> send kill signal to child processes too\n\n[program:'\"$bench_folder\"'-frappe-web]\ncommand='\"$benchdir\"'/env/bin/gunicorn -b 127.0.0.1:8000 -w 3 --max-requests 5000 --max-requests-jitter 500 -t 120 frappe.app:application --preload\npriority=4\nautostart=true\nautorestart=true\nstdout_logfile='\"$benchdir\"'/logs/web.log\nstderr_logfile='\"$benchdir\"'/logs/web.error.log\nuser='\"$USER\"'\ndirectory='\"$benchdir\"'/sites\n\n[program:'\"$bench_folder\"'-frappe-schedule]\ncommand=/usr/local/bin/bench schedule\npriority=3\nautostart=true\nautorestart=true\nstdout_logfile='\"$benchdir\"'/logs/schedule.log\nstderr_logfile='\"$benchdir\"'/logs/schedule.error.log\nuser='\"$USER\"'\ndirectory='\"$benchdir\"'\n\n[program:'\"$bench_folder\"'-frappe-default-worker]\ncommand=/usr/local/bin/bench worker --queue default\npriority=4\nautostart=true\nautorestart=true\nstdout_logfile='\"$benchdir\"'/logs/worker.log\nstderr_logfile='\"$benchdir\"'/logs/worker.error.log\nuser='\"$USER\"'\nstopwaitsecs=1560\ndirectory='\"$benchdir\"'\nkillasgroup=true\nnumprocs=1\nprocess_name=%(program_name)s-%(process_num)d\n\n[program:'\"$bench_folder\"'-frappe-short-worker]\ncommand=/usr/local/bin/bench worker --queue short\npriority=4\nautostart=true\nautorestart=true\nstdout_logfile='\"$benchdir\"'/logs/worker.log\nstderr_logfile='\"$benchdir\"'/logs/worker.error.log\nuser='\"$USER\"'\nstopwaitsecs=360\ndirectory='\"$benchdir\"'\nkillasgroup=true\nnumprocs=1\nprocess_name=%(program_name)s-%(process_num)d\n\n[program:'\"$bench_folder\"'-frappe-long-worker]\ncommand=/usr/local/bin/bench worker --queue long\npriority=4\nautostart=true\nautorestart=true\nstdout_logfile='\"$benchdir\"'/logs/worker.log\nstderr_logfile='\"$benchdir\"'/logs/worker.error.log\nuser='\"$USER\"'\nstopwaitsecs=1560\ndirectory='\"$benchdir\"'\nkillasgroup=true\nnumprocs=1\nprocess_name=%(program_name)s-%(process_num)d\n\n[program:'\"$bench_folder\"'-redis-cache]\ncommand=/usr/bin/redis-server '\"$benchdir\"'/config/redis_cache.conf\npriority=1\nautostart=true\nautorestart=true\nstdout_logfile='\"$benchdir\"'/logs/redis-cache.log\nstderr_logfile='\"$benchdir\"'/logs/redis-cache.error.log\nuser='\"$USER\"'\ndirectory='\"$benchdir\"'/sites\n\n[program:'\"$bench_folder\"'-redis-queue]\ncommand=/usr/bin/redis-server '\"$benchdir\"'/config/redis_queue.conf\npriority=1\nautostart=true\nautorestart=true\nstdout_logfile='\"$benchdir\"'/logs/redis-queue.log\nstderr_logfile='\"$benchdir\"'/logs/redis-queue.error.log\nuser='\"$USER\"'\ndirectory='\"$benchdir\"'/sites\n\n[program:'\"$bench_folder\"'-node-socketio]\ncommand=/usr/bin/node '\"$benchdir\"'/apps/frappe/socketio.js\npriority=4\nautostart=true\nautorestart=true\nstdout_logfile='\"$benchdir\"'/logs/node-socketio.log\nstderr_logfile='\"$benchdir\"'/logs/node-socketio.error.log\nuser='\"$USER\"'\ndirectory='\"$benchdir\"'\n\n[group:'\"$bench_folder\"'-web]\"$HOME/$bench_folder\"\nprograms='\"$bench_folder\"'-frappe-schedule,'\"$bench_folder\"'-frappe-default-worker,'\"$bench_folder\"'-frappe-short-worker,'\"$bench_folder\"'-frappe-long-worker\n\n[group:'\"$bench_folder\"'-redis]\nprograms='\"$bench_folder\"'-redis-cache,'\"$bench_folder\"'-redis-queue\nEOF'\n\necho -e \"${YELLOW}Applying necessary permissions to supervisor...${NC}\"\nsleep 1\n# Change ownership of supervisord.conf\nsudo sed -i '6i chown='\"$USER\"':'\"$USER\"'' /etc/supervisor/supervisord.conf && \\\n\nsudo bash -c 'cat << EOF >> /etc/hosts\n127.0.1.1 '\"$site_name\"'\nEOF'\n\n# Restart nginx and supervisor\nsudo service nginx restart\nsudo service supervisor restart\n/usr/bin/supervisorctl reread\n/usr/bin/supervisorctl update\nsudo service nginx reload\n\necho -e \"${YELLOW}Enabling Scheduler...${NC}\"\nsleep 1\n\n# Enable and resume the scheduler for the site\nbench --site $site_name scheduler enable && \\\nbench --site $site_name scheduler resume && \\\n\necho -e \"${YELLOW}Adding apps Payments, Dokos and Hrms to your website.${NC}\"\nsleep 1\nbench --site $site_name install-app payments\nbench --site $site_name install-app dokos\nbench --site $site_name install-app hrms\n\necho -e \"${YELLOW}Restarting bench to apply all changes and optimizing environment pernissions.${NC}\"\nsleep 1\n\n#Now to make sure the environment is fully setup\nsudo chmod 755 /home/$(echo $USER)\nsleep 3\nprintf \"${GREEN}Production setup complete! \"\nprintf '\\xF0\\x9F\\x8E\\x86'\nprintf \"${NC}\\n\"\nsleep 3\n\n\n# Now let's reactivate virtual environment\nif [ -z \"$py_version\" ] || [ \"$py_major\" -lt 3 ] || [ \"$py_major\" -eq 3 -a \"$py_minor\" -lt 10 ]; then\n    deactivate\nfi\n\necho -e \"${GREEN}--------------------------------------------------------------------------------\"\necho -e \"Congratulations! You have successfully installed Dokos 4.\"\necho -e \"You can start using your new ERPNext installation by visiting http://$site_name\"\necho -e \"(if you have enabled SSL and used a Fully Qualified Domain Name\"\necho -e \"during installation) or http://$server_ip to begin.\"\necho -e \"Install additional apps as required. Visit https://docs.erpnext.com for Documentation.\"\necho -e \"Enjoy using ERPNext!\"\necho -e \"--------------------------------------------------------------------------------${NC}\"\n"},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"#!/usr/bin/env bash\n\n# Retrieve server IP\nserver_ip=$(hostname -I | awk '{print $1}')\n\n#Retrieve script folder\nscript_folder=$(pwd)\n\n# Setting up colors for echo commands\nYELLOW='\\033[1;33m'\nGREEN='\\033[0;32m'\nRED='\\033[0;31m'\nLIGHT_BLUE='\\033[1;34m'\nNC='\\033[0m' # No Color\n\n# Checking Supported OS and distribution\nSUPPORTED_DISTRIBUTIONS=(\"Ubuntu\" \"Debian\")\nSUPPORTED_VERSIONS=(\"22.04\" \"12\")\n\ncheck_os() {\n    local os_name=$(lsb_release -is)\n    local os_version=$(lsb_release -rs)\n    local os_supported=false\n    local version_supported=false\n\n    for i in \"${SUPPORTED_DISTRIBUTIONS[@]}\"; do\n        if [[ \"$i\" = \"$os_name\" ]]; then\n            os_supported=true\n            break\n        fi\n    done\n\n    for i in \"${SUPPORTED_VERSIONS[@]}\"; do\n        if [[ \"$i\" = \"$os_version\" ]]; then\n            version_supported=true\n            break\n        fi\n    done\n\n    if [[ \"$os_supported\" = false ]] || [[ \"$version_supported\" = false ]]; then\n        echo -e \"${RED}This script is not compatible with your operating system or its version.${NC}\"\n        exit 1\n    fi\n}\n\n# Detect the platform (similar to $OSTYPE)\nOS=\"`uname`\"\ncase $OS in\n  'Linux')\n    OS='Linux'\n    if [ -f /etc/redhat-release ] ; then\n      DISTRO='CentOS'\n    elif [ -f /etc/debian_version ] ; then\n      if [ \"$(lsb_release -si)\" == \"Ubuntu\" ]; then\n        DISTRO='Ubuntu'\n      else\n        DISTRO='Debian'\n      fi\n    fi\n    ;;\n  *) ;;\nesac\n\n\nask_twice() {\n    local prompt=\"$1\"\n    local secret=\"$2\"\n    local val1 val2\n\n    while true; do\n        if [ \"$secret\" = \"true\" ]; then\n\n            read -rsp \"$prompt: \" val1\n\n            echo >&2\n        else\n            read -rp \"$prompt: \" val1\n            echo >&2\n        fi\n        \n        if [ \"$secret\" = \"true\" ]; then\n            read -rsp \"Confirm password: \" val2\n            echo >&2\n        else\n            read -rp \"Confirm password: \" val2\n            echo >&2\n        fi\n\n        if [ \"$val1\" = \"$val2\" ]; then\n            printf \"${GREEN}Password confirmed${NC}\" >&2\n            echo \"$val1\"\n            break\n        else\n            printf \"${RED}Inputs do not match. Please try again${NC}\\n\" >&2\n            echo -e \"\\n\"\n        fi\n    done\n}\necho -e \"${LIGHT_BLUE}Welcome to the Dokos Installer...${NC}\"\necho -e \"\\n\"\nsleep 3\n\n# Check OS and version compatibility for all versions\ncheck_os\n\nbench_folder=\"dokos-bench-folder\"\nbenchdir=\"$HOME/$bench_folder\"\n\n#First Let's take you home\ncd $(sudo -u $USER echo $HOME)\necho -e \"\\n\"\n\n#Now let's make sure your instance has the most updated packages\necho -e \"${YELLOW}Updating system packages...${NC}\"\nsleep 2\nsudo apt update\nsudo apt upgrade -y\necho -e \"${GREEN}System packages updated.${NC}\"\nsleep 2\n\n#Now let's install a couple of requirements: git, curl and pip\necho -e \"${YELLOW}Installing preliminary package requirements${NC}\"\nsleep 3\nsudo apt install software-properties-common git curl -y\n\n#Next we'll install the python environment manager...\npy_version=$(python3 --version 2>&1 | awk '{print $2}')\npy_major=$(echo \"$py_version\" | cut -d '.' -f 1)\npy_minor=$(echo \"$py_version\" | cut -d '.' -f 2)\npy_version=$(echo \"$py_major\".\"$py_minor\")\necho -e \"${YELLOW}Installing additional Python packages and Redis Server${NC}\"\nsleep 2\nsudo apt install ca-certificates git python3-dev python3-setuptools python3-venv python3-pip python3-distutils redis-server xvfb libfontconfig wkhtmltopdf -y && \\\n# Mise à jour des dépôts\nsudo apt --fix-broken install -y && \\\nsudo apt install fontconfig xvfb libfontconfig xfonts-base xfonts-75dpi libxrender1 -y && \\\n\necho -e \"${GREEN}Done!${NC}\"\nsleep 1\necho -e \"\\n\"\n#... And mariadb with some extra needed applications.\necho -e \"${YELLOW}Now installing MariaDB.${NC}\"\nsleep 2\nsudo apt install mariadb-server mariadb-client -y\necho -e \"${GREEN}MariaDB and other packages have been installed successfully.${NC}\"\nsleep 2\n\n\n#Install NVM, Node, npm and yarn\necho -e ${YELLOW}\"Now to install NVM, Node, npm and yarn${NC}\"\nsleep 2\ncurl https://raw.githubusercontent.com/creationix/nvm/master/install.sh | bash\n\n# Add environment variables to .profile\necho 'export NVM_DIR=\"$HOME/.nvm\"' >> ~/.profile\necho '[ -s \"$NVM_DIR/nvm.sh\" ] && \\. \"$NVM_DIR/nvm.sh\"  # This loads nvm' >> ~/.profile\necho '[ -s \"$NVM_DIR/bash_completion\" ] && \\. \"$NVM_DIR/bash_completion\"  # This loads nvm bash_completion' >> ~/.profile\n\n# Source .profile to load the new environment variables in the current session\nsource ~/.profile\n\n# Conditional Node.js installation based on the version of ERPNext selected\nnvm install 18\nnode_version=\"18\"\nsudo apt-get -qq install npm -y\nsudo npm install -g yarn\necho -e \"${GREEN}Package installation complete!${NC}\"\nsleep 2\n\n# Now let's reactivate virtual environment if needed and install bench\necho -e \"${YELLOW}Now let's reactivate virtual environment if needed and install bench${NC}\"\nsleep 4\npython3 -m venv $USER && \\\nsource $USER/bin/activate\nnvm use $node_version\npip3 install --upgrade --quiet dokos-cli\n\n\n#Initiate bench in $bench_folder folder, but get a supervisor can't restart bench error...\necho -e \"${YELLOW}Initialising bench in $bench_folder folder.${NC}\" \necho -e \"${LIGHT_BLUE}If you get a restart failed, don't worry, we will resolve that later.${NC}\"\nsleep 4\nbench init $bench_folder --version v4 --verbose\necho -e \"${GREEN}Bench installation complete!${NC}\"\nsleep 2\n\nsudo -k\n\n# Prompt user for site name\necho -e \"${YELLOW}Preparing for new site installation. This could take a minute... or two so please be patient.${NC}\"\nread -p \"Enter the site name (If you wish to install SSL later, please enter a FQDN): \" site_name\nsleep 1\nadmin_pwd=$(ask_twice \"Enter the Administrator password\" \"true\")\necho -e \"\\n\"\nsleep 1\n\n#Next let's set some important parameters.\nread -p \"Choose a name for Dokos's database and database's username: \" db_name\nsleep 1\ndb_pwd=$(ask_twice \"Choose a password for the Dokos's database's username\" \"true\")\necho -e \"\\n\"\nsleep 1\n\n#Now we'll go through the required settings of the mysql_secure_installation...\necho -e ${YELLOW}\"Now we'll go ahead to apply MariaDB security settings...${NC}\"\nsleep 2\n    \nsudo mysql -u root -e \"CREATE USER '$db_name'@'localhost' IDENTIFIED BY '$db_pwd';\"\nsudo mysql -u root -e \"CREATE DATABASE IF NOT EXISTS $db_name CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci;\"\nsudo mysql -u root -e \"GRANT ALL PRIVILEGES ON $db_name . * TO '$db_name'@'localhost';\"\nsudo mysql -u root -e \"FLUSH PRIVILEGES;\"\n\n#sudo service mysql restart\necho -e \"${GREEN}MariaDB settings done!${NC}\"\necho -e \"\\n\"\nsleep 1\n\necho -e \"${YELLOW}Now setting up your site. This might take a few minutes. Please wait...${NC}\"\nsleep 1\n# Change directory to $bench_folder\ncd $bench_folder && \\\n\nsudo chmod -R o+rx /home/$(echo $USER)\n\necho -e \"${YELLOW}Installing apps Payments, Dokos and Hrms to the bench. Please wait...${NC}\"\nsleep 1\nbench get-app --branch v4 payments\nbench get-app --branch v4 dokos\nbench get-app --branch v4 hrms\n\necho -e \"${YELLOW}Installing the website and initalising its database. Please wait...${NC}\"\nsleep 1\n\nbench new-site $site_name --db-name $db_name --db-password $db_pwd --no-setup-db --admin-password $admin_pwd\n\n### fail2ban était installé et paramétré par la commande \"sudo bench setup production $USER\" mais n'est plus traité dans ce script du coup\n\necho -e \"${YELLOW}Installing packages and dependencies for Production...${NC}\"\nsleep 2\n\n# Install and setup supervisor and nginx config\nsudo apt install nginx supervisor -y\nsudo bash -c 'cat << EOF >> /etc/nginx/conf.d/'\"$bench_folder\"'.conf\nupstream '\"$bench_folder\"'-frappe {\n    server 127.0.0.1:8000 fail_timeout=0;\n}\n\nupstream '\"$bench_folder\"'-socketio-server {\n    server 127.0.0.1:9000 fail_timeout=0;\n}\n\nserver {\n    \n    listen 80;\n    listen [::]:80;\n\n    server_name '\"$site_name\"';\n\n    root '\"$benchdir\"'/sites;\n\n    proxy_buffer_size 128k;\n    proxy_buffers 4 256k;\n    proxy_busy_buffers_size 256k;\n\n    add_header X-Frame-Options \"SAMEORIGIN\";\n    add_header Strict-Transport-Security \"max-age=63072000; includeSubDomains; preload\";\n    add_header X-Content-Type-Options nosniff;\n    add_header X-XSS-Protection \"1; mode=block\";\n    add_header Referrer-Policy \"same-origin, strict-origin-when-cross-origin\";\n\n    location /assets {\n        try_files \\$uri =404;\n    }\n\n    location ~ ^/protected/(.*) {\n        internal;\n        try_files /'\"$site_name\"'/\\$1 =404;\n    }\n\n    location /socket.io {\n        proxy_http_version 1.1;\n        proxy_set_header Upgrade \\$http_upgrade;\n        proxy_set_header Connection \"upgrade\";\n        proxy_set_header X-Frappe-Site-Name '\"$site_name\"';\n        proxy_set_header Origin $scheme://\\$http_host;\n        proxy_set_header Host '\"$site_name\"';\n\n        proxy_pass http://'\"$bench_folder\"'-socketio-server;\n    }\n\n    location ^~ /.well-known/acme-challenge/ {\n        default_type \"text/plain\";\n        root /var/www/letsencrypt;\n    }\n\n    location = /.well-known/acme-challenge/ {\n        return 404;\n    }\n\n    location / {\n\n        rewrite ^(.+)/\\$ \\$1 permanent;\n        rewrite ^(.+)/index\\.html\\$ \\$1 permanent;\n        rewrite ^(.+)\\.html\\$ \\$1 permanent;\n\n        location ~* ^/files/.*.(htm|html|svg|xml) {\n            add_header Content-disposition \"attachment\";\n            try_files /'\"$site_name\"'/public/\\$uri @webserver;\n        }\n\n        try_files /'\"$site_name\"'/public/\\$uri @webserver;\n    }\n\n    location @webserver {\n        proxy_http_version 1.1;\n        proxy_set_header X-Forwarded-For \\$remote_addr;\n        proxy_set_header X-Forwarded-Proto \\$scheme;\n        proxy_set_header X-Frappe-Site-Name '\"$site_name\"';\n        proxy_set_header Host '\"$site_name\"';\n        proxy_set_header X-Use-X-Accel-Redirect True;\n        proxy_read_timeout 120;\n        proxy_redirect off;\n\n        proxy_pass  http://'\"$bench_folder\"'-frappe;\n    }\n\n    # error pages\n    error_page 502 /502.html;\n    location /502.html {\n        root /usr/local/lib/python'\"$py_version\"'/dist-packages/bench/config/templates;\n        internal;\n    }\n    \n    # optimizations\n    sendfile on;\n    keepalive_timeout 15;\n    client_max_body_size 50m;\n    client_body_buffer_size 16K;\n    client_header_buffer_size 1k;\n    large_client_header_buffers 4 32k;\n\n    # enable gzip compresion\n    gzip on;\n    gzip_http_version 1.1;\n    gzip_comp_level 5;\n    gzip_min_length 256;\n    gzip_proxied any;\n    gzip_vary on;\n    gzip_types\n        application/atom+xml\n        application/javascript\n        application/json\n        application/rss+xml\n        application/vnd.ms-fontobject\n        application/x-font-ttf\n        application/font-woff\n        application/x-web-app-manifest+json\n        application/xhtml+xml\n        application/xml\n        font/opentype\n        image/svg+xml\n        image/x-icon\n        text/css\n        text/plain\n        text/x-component\n        ;\n\n    tcp_nodelay on;\n    server_tokens off;\n\n    open_file_cache max=65000 inactive=1m;\n    open_file_cache_valid 5s;\n    open_file_cache_min_uses 1;\n    open_file_cache_errors on;\n\n}\nEOF'\n\nsudo bash -c 'cat << EOF >> /etc/supervisor/conf.d/'\"$bench_folder\"'.conf\n; Notes:\n; priority=1 --> Lower priorities indicate programs that start first and shut down last\n; killasgroup=true --> send kill signal to child processes too\n\n[program:'\"$bench_folder\"'-frappe-web]\ncommand='\"$benchdir\"'/env/bin/gunicorn -b 127.0.0.1:8000 -w 3 --max-requests 5000 --max-requests-jitter 500 -t 120 frappe.app:application --preload\npriority=4\nautostart=true\nautorestart=true\nstdout_logfile='\"$benchdir\"'/logs/web.log\nstderr_logfile='\"$benchdir\"'/logs/web.error.log\nuser='\"$USER\"'\ndirectory='\"$benchdir\"'/sites\n\n[program:'\"$bench_folder\"'-frappe-schedule]\ncommand=/usr/local/bin/bench schedule\npriority=3\nautostart=true\nautorestart=true\nstdout_logfile='\"$benchdir\"'/logs/schedule.log\nstderr_logfile='\"$benchdir\"'/logs/schedule.error.log\nuser='\"$USER\"'\ndirectory='\"$benchdir\"'\n\n[program:'\"$bench_folder\"'-frappe-default-worker]\ncommand=/usr/local/bin/bench worker --queue default\npriority=4\nautostart=true\nautorestart=true\nstdout_logfile='\"$benchdir\"'/logs/worker.log\nstderr_logfile='\"$benchdir\"'/logs/worker.error.log\nuser='\"$USER\"'\nstopwaitsecs=1560\ndirectory='\"$benchdir\"'\nkillasgroup=true\nnumprocs=1\nprocess_name=%(program_name)s-%(process_num)d\n\n[program:'\"$bench_folder\"'-frappe-short-worker]\ncommand=/usr/local/bin/bench worker --queue short\npriority=4\nautostart=true\nautorestart=true\nstdout_logfile='\"$benchdir\"'/logs/worker.log\nstderr_logfile='\"$benchdir\"'/logs/worker.error.log\nuser='\"$USER\"'\nstopwaitsecs=360\ndirectory='\"$benchdir\"'\nkillasgroup=true\nnumprocs=1\nprocess_name=%(program_name)s-%(process_num)d\n\n[program:'\"$bench_folder\"'-frappe-long-worker]\ncommand=/usr/local/bin/bench worker --queue long\npriority=4\nautostart=true\nautorestart=true\nstdout_logfile='\"$benchdir\"'/logs/worker.log\nstderr_logfile='\"$benchdir\"'/logs/worker.error.log\nuser='\"$USER\"'\nstopwaitsecs=1560\ndirectory='\"$benchdir\"'\nkillasgroup=true\nnumprocs=1\nprocess_name=%(program_name)s-%(process_num)d\n\n[program:'\"$bench_folder\"'-redis-cache]\ncommand=/usr/bin/redis-server '\"$benchdir\"'/config/redis_cache.conf\npriority=1\nautostart=true\nautorestart=true\nstdout_logfile='\"$benchdir\"'/logs/redis-cache.log\nstderr_logfile='\"$benchdir\"'/logs/redis-cache.error.log\nuser='\"$USER\"'\ndirectory='\"$benchdir\"'/sites\n\n[program:'\"$bench_folder\"'-redis-queue]\ncommand=/usr/bin/redis-server '\"$benchdir\"'/config/redis_queue.conf\npriority=1\nautostart=true\nautorestart=true\nstdout_logfile='\"$benchdir\"'/logs/redis-queue.log\nstderr_logfile='\"$benchdir\"'/logs/redis-queue.error.log\nuser='\"$USER\"'\ndirectory='\"$benchdir\"'/sites\n\n[program:'\"$bench_folder\"'-node-socketio]\ncommand=/usr/bin/node '\"$benchdir\"'/apps/frappe/socketio.js\npriority=4\nautostart=true\nautorestart=true\nstdout_logfile='\"$benchdir\"'/logs/node-socketio.log\nstderr_logfile='\"$benchdir\"'/logs/node-socketio.error.log\nuser='\"$USER\"'\ndirectory='\"$benchdir\"'\n\n[group:'\"$bench_folder\"'-web]\"$HOME/$bench_folder\"\nprograms='\"$bench_folder\"'-frappe-schedule,'\"$bench_folder\"'-frappe-default-worker,'\"$bench_folder\"'-frappe-short-worker,'\"$bench_folder\"'-frappe-long-worker\n\n[group:'\"$bench_folder\"'-redis]\nprograms='\"$bench_folder\"'-redis-cache,'\"$bench_folder\"'-redis-queue\nEOF'\n\necho -e \"${YELLOW}Applying necessary permissions to supervisor...${NC}\"\nsleep 1\n# Change ownership of supervisord.conf\nsudo sed -i '6i chown='\"$USER\"':'\"$USER\"'' /etc/supervisor/supervisord.conf && \\\n\nsudo bash -c 'cat << EOF >> /etc/hosts\n127.0.1.1 '\"$site_name\"'\nEOF'\n\n# Restart nginx and supervisor\nsudo service nginx restart\nsudo service supervisor restart\n/usr/bin/supervisorctl reread\n/usr/bin/supervisorctl update\nsudo service nginx reload\n\necho -e \"${YELLOW}Enabling Scheduler...${NC}\"\nsleep 1\n\n# Enable and resume the scheduler for the site\nbench --site $site_name scheduler enable && \\\nbench --site $site_name scheduler resume && \\\n\necho -e \"${YELLOW}Adding apps Payments, Dokos and Hrms to your website.${NC}\"\nsleep 1\nbench --site $site_name install-app payments\nbench --site $site_name install-app dokos\nbench --site $site_name install-app hrms\n\necho -e \"${YELLOW}Restarting bench to apply all changes and optimizing environment pernissions.${NC}\"\nsleep 1\n\n#Now to make sure the environment is fully setup\nsudo chmod 755 /home/$(echo $USER)\nsleep 3\nprintf \"${GREEN}Production setup complete! \"\nprintf '\\xF0\\x9F\\x8E\\x86'\nprintf \"${NC}\\n\"\nsleep 3\n\n\n# Now let's reactivate virtual environment\nif [ -z \"$py_version\" ] || [ \"$py_major\" -lt 3 ] || [ \"$py_major\" -eq 3 -a \"$py_minor\" -lt 10 ]; then\n    deactivate\nfi\n\necho -e \"${GREEN}--------------------------------------------------------------------------------\"\necho -e \"Congratulations! You have successfully installed Dokos 4.\"\necho -e \"You can start using your new ERPNext installation by visiting http://$site_name\"\necho -e \"(if you have enabled SSL and used a Fully Qualified Domain Name\"\necho -e \"during installation) or http://$server_ip to begin.\"\necho -e \"Install additional apps as required. Visit https://docs.erpnext.com for Documentation.\"\necho -e \"Enjoy using ERPNext!\"\necho -e \"--------------------------------------------------------------------------------${NC}\"\n"}]}]}],"toc":{"title":"","searchDepth":2,"depth":2,"links":[]}},"_type":"markdown","_id":"content:3.dodock:11.installation:9.plus:5.script-bash.md","_source":"content","_file":"3.dodock/11.installation/9.plus/5.script-bash.md","_extension":"md"}